/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;
import BUS.VegetableBUS;
import Entities.Category;
import Entities.Vegetable;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author ASUS
 */
public class VegetableGUI extends javax.swing.JPanel {
    private List<Category> categoryList = new ArrayList<>();

    private VegetableBUS vegetableBUS =new VegetableBUS();

    public VegetableGUI() {
        initComponents();
        populateCategoryComboBox();
        showVegetables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtVegetableName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbCategory = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtImage = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtUnit = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVegtable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 602));

        jPanel2.setBackground(new java.awt.Color(153, 255, 204));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel2.setText("Vegetable Name:");

        txtVegetableName.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        txtVegetableName.setName("txtVetgetableName"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel3.setText("Price: ");

        txtPrice.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel4.setText("Amount: ");

        txtAmount.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel5.setText("Category: ");

        cbCategory.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        cbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoryActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel6.setText("Image: ");

        txtImage.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel7.setText("Unit: ");

        txtUnit.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("QUẢN LÝ SẢN PHẨM");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtVegetableName, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addGap(90, 90, 90)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(93, 93, 93)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImage, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 308, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtVegetableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        tblVegtable.setBackground(new java.awt.Color(204, 255, 255));
        tblVegtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Vegetable ID", "Vegetable Name", "Price", "Amount", "Unit", "Category", "Image"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblVegtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVegtableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblVegtable);

        btnAdd.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setPreferredSize(new java.awt.Dimension(100, 27));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd);

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setPreferredSize(new java.awt.Dimension(100, 27));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate);

        btnDelete.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setPreferredSize(new java.awt.Dimension(100, 27));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);

        btnSearch.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setPreferredSize(new java.awt.Dimension(100, 27));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch);

        txtSearch.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        txtSearch.setPreferredSize(new java.awt.Dimension(150, 26));
        jPanel1.add(txtSearch);

        btnReset.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setPreferredSize(new java.awt.Dimension(100, 27));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        jPanel1.add(btnReset);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCategoryActionPerformed
    
    
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String name = txtSearch.getText();
        if (isNullOrEmptyString(name)){
            JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khóa cần tìm kiếm ",
                    "Error Measage!!!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        showVegetables(vegetableBUS.searchVegetableByName(name));
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblVegtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVegtableMouseClicked
        int selectRow = tblVegtable.getSelectedRow();
        if (selectRow != -1) {

            String name = (String) tblVegtable.getValueAt(selectRow, 1);
            float price = (float) tblVegtable.getValueAt(selectRow, 2);
            int amount = (int) tblVegtable.getValueAt(selectRow, 3);
            String unit = (String) tblVegtable.getValueAt(selectRow, 4);
            String categoryName = (String) tblVegtable.getValueAt(selectRow,5);
            String image = (String) tblVegtable.getValueAt(selectRow, 6);

            txtVegetableName.setText(name);
            txtPrice.setText(String.valueOf(price));
            txtAmount.setText(String.valueOf(amount));
            txtUnit.setText(unit);
            txtImage.setText(image);
            for (Category c : categoryList) {
                if (c.getName().equals(categoryName)) {
                    cbCategory.setSelectedItem(c);
                    break;
                }
            }
        }//GEN-LAST:event_tblVegtableMouseClicked
    }
    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed



    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        String name = txtVegetableName.getText();
        String amount = txtAmount.getText();
        Category category = (Category) cbCategory.getSelectedItem();
        String image =txtImage.getText();
        String unit =txtUnit.getText();
        String price = txtPrice.getText();

        int selectRow = tblVegtable.getSelectedRow();
        if (selectRow == -1){
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn dòng sản phẩm cần sửa",
                    "Error Message!!!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        int vegetableID = (int) tblVegtable.getValueAt(selectRow, 0);
        if (isNullOrEmptyString(name)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Tên sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(String.valueOf(amount))){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Số Lượng sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }


        if (isNullOrEmptyString(image)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Ảnh sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(unit)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Đơn Vị sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }


        if (isNullOrEmptyString(price)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Giá sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isNumeric(amount)){
            JOptionPane.showMessageDialog(this, "Số lượng chỉ được nhập số !!",
                    "Error Message!!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!isNumeric(price)){
            JOptionPane.showMessageDialog(this, "Giá tiền chỉ được nhập số !!",
                    "Error Message!!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int amountT = Integer.parseInt(txtAmount.getText());
        float priceS = Float.parseFloat(txtPrice.getText());

        Vegetable vegetable = new Vegetable(name, unit, amountT, image, priceS);
        vegetable.setVegetableID(vegetableID);
        boolean success = vegetableBUS.updateVegetable(vegetable, category.getCategoryID());
        if (success) {
            JOptionPane.showMessageDialog(this, "Cập nhật thành công");
            showVegetables();
        } else {
            JOptionPane.showMessageDialog(this, "Cập nhật thất bại");
        }


    }                                         

    private boolean isNullOrEmptyString(String str) {
        return str == null || str.trim().isEmpty();
    }

    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {
        String name = txtVegetableName.getText();
        String amount = txtAmount.getText();
        Category category = (Category) cbCategory.getSelectedItem();
        String image =txtImage.getText();
        String unit =txtUnit.getText();
        String price = txtPrice.getText();

        if (isNullOrEmptyString(name)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Tên sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(String.valueOf(amount))){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Số Lượng sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }


        if (isNullOrEmptyString(image)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Ảnh sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(unit)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Đơn Vị sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }


        if (isNullOrEmptyString(price)){
            JOptionPane.showMessageDialog(this, "Bạn chưa điền Giá sản phẩm !!",
                    "Error message",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isNumeric(amount)){
            JOptionPane.showMessageDialog(this, "Số lượng chỉ được nhập số !!",
                    "Error Message!!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!isNumeric(price)){
            JOptionPane.showMessageDialog(this, "Giá tiền chỉ được nhập số !!",
                    "Error Message!!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int amountT = Integer.parseInt(txtAmount.getText());
        float priceS = Float.parseFloat(txtPrice.getText());

        Vegetable vegetable = new Vegetable(name, unit, amountT, image, priceS);
        boolean success = vegetableBUS.addVegetable(vegetable, category.getCategoryID());
        if (success) {
            JOptionPane.showMessageDialog(this, "Thêm thành công");
            showVegetables();
        } else {
            JOptionPane.showMessageDialog(this, "Thêm thất bại");
        }



    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = tblVegtable.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm muốn xóa !!!", "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int vegetableID = (int) tblVegtable.getValueAt(selectedRow, 0);

        int rely = JOptionPane.showConfirmDialog(
                this,
                "Xác nhận xóa vegetableID: " + vegetableID,
                "Xóa vegetable",
                JOptionPane.YES_NO_OPTION);
        if (rely == JOptionPane.YES_OPTION) {
            boolean success = vegetableBUS.deleteVegetable(vegetableID);
            if (success) {
                JOptionPane.showMessageDialog(this, "Đã xóa thành công ");
                showVegetables();
                return;
            }
            JOptionPane.showMessageDialog(this, "Xóa thất bại");
        }
    }

    private void showVegetables() {
        List<Vegetable> vegetables = vegetableBUS.getVegetables();
        showVegetables(vegetables);
    }

    private void showVegetables(List<Vegetable> vegetables) {
        DefaultTableModel model = (DefaultTableModel) tblVegtable.getModel();
        model.setRowCount(0);

        for (Vegetable vegetable : vegetables){
            Object[] row =vegetable.toObject();
            model.addRow(row);
        }
        changeTableHeight(tblVegtable);

    }

    private void changeTableHeight(JTable table) {
        int rowHeight = table.getRowHeight();
        int numRows = table.getRowCount();
        int height = numRows * rowHeight;
        table.setPreferredSize(new Dimension(table.getPreferredSize().width, height));
    }


    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {
        txtVegetableName.setText(null);
        txtAmount.setText(null);
        txtImage.setText(null);
        txtSearch.setText(null);
        txtPrice.setText(null);
        txtUnit.setText(null);
        showVegetables();

    }                                        


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Category> cbCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblVegtable;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtImage;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUnit;
    private javax.swing.JTextField txtVegetableName;
    // End of variables declaration//GEN-END:variables
    
    
    private void populateCategoryComboBox() {
        categoryList = vegetableBUS.getCategories();
        for (Category c: categoryList) {
            System.out.println(c);
            cbCategory.addItem(c);
        }
        cbCategory.setRenderer(new CategoryCombobox());

    }
    

    
}
